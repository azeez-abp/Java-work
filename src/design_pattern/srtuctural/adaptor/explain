Adapter is a structural design pattern that allows objects with incompatible interfaces to collaborate.
converts the interface of a class into another interface that a client wants
Advantage of Adapter Pattern
It allows two or more previously incompatible objects to interact.

It allows reusability of existing functionality.

use
When an object needs to utilize an existing class with an incompatible interface.
When you want to create a reusable class that cooperates with classes which don't have compatible interfaces.
When you want to create a reusable class that cooperates with classes which don't have compatible interfaces.

Implementation
Target Interface: This is the desired interface class which will be used by the clients.
Adapter class: This class is a wrapper class which implements the desired target interface and modifies the specific request available from the Adaptee class.
Adaptee class: This is the class which is used by the Adapter class to reuse the existing functionality and modify them for desired use.
Client: This class will interact with the Adapter class.
adapter = A class that is converted to another class using a so-called adapter class.
Create interphase
create adaptee(something connected to adaptor) class
create adapter class

adaptee extend adapter and  adapter implement interphase

 In reality, the adapter contains an instance of the adaptee
 Adatee extends(connect) adater

Adaptor pattern is use to manage any class/packeage that will be or may be replace in future
we use adaptee through in the application while it adaptor is change when require
An adapter creates an interface between 2 classes so that when an incompatible method is called the user is instead diverted to a method that works

 the same perform different function in different object  (9=>on in one object && 9 =>volume up in other object)